1) Cite dois exemplos práticos de PILHA ao qual utilizamos no dia a dia na área computacional.
R: Ctrl + Z e retroceder pagina no navegador

2) Em  uma  pilha  necessitamos  definir  uma  variável  de  ponteiro  independente dos demais dados contidos no nó. Qual tipo deve ser o ponteiro e quanto ele consumirá de memória? Justifique sua resposta.
R: Devemos atribuir o ponteiro ao tipo da struct, pois dentro da struct pode ter varios tipos primitidos de dados, quanto ao consumo de memoria será 4 bytes para compiladores 32bits ou 8 bytes para compiladores 64bits

3) Quais as possíveis operações que podemos efetuar em uma pilha? Explique.
R: Em pilha podemos efetuar push() que é para empilhar e pop() para desempilhar

4) Em  uma  pilha,  o  que  acontece  se  atribuirmos  NULL  para  o  ponteiro  que aponta para o topo da pilha?
R: Estaremos dizendo que ali sera o topo da pilha e que não existe nenhum dado acima dele, ou proximo

5) Analise e apresente as diferenças entre um vetor estático, um vetor dinâmico e uma lista simplesmente encadeada.
R: Um vetor estatico tera sempre a quantidade de elementos que definimos ao incializar ele, o vetor dinamico já é algo variavel em que podemos diminuir ou aumentar o seu tamanho durante a execução do código, já para a lista simplesmente encadeada podemos inserir o elemento no inicio ou no final dela, onde teremos um ponteiro que aponta para o proximo elemento

10) Dada a sequência de operações abaixo, indique o conteúdo final da pilha (do topo para a base), supondo que ela se inicie vazia: push('A'), push('B'), pop(), push('C'), push('D'), pop(), pop(), push('E'). 
R: Conteudo final da pilha será "E" -> "A"

11) Considere a pilha armazenada no vetor int S[5] = {3, 8, 2, 7, 1} com topo = 2 (ou seja, o elemento no índice 2 é o topo). Quais elementos ainda podem ser removidos  por  chamadas  sucessivas  de  pop  sem  provocar  underflow? Explique.
R: Ainda podemos remover os elementos 2, 8 e 3, com isso liberamos a pilha por completo e não causamos underflow

12) Como funciona as operações (inserção e remoção) em uma LISTA simplesmente encadeada?
R: Levando em consideração que a inserção será no inicio da lista devemos atribuir o endereço de memoria do primeiro item da lista no ponteiro "proximo" do item que estamos inserindo, já para remoção, antes precisamos apontar o ponteiro de "proximo" do item anterior ao proximo item que estamos removendo , se não iremos quebrar a sequencia da lista

13) Quais são as características de uma lista duplamente encadeada?
R: A lista duplamente encadeada terá ponteiros de "anterior" e "proximo", indicando dois sentidos, o de percorrer a lista no sentido de proximo (indo) e o de anterior (voltando)

14) Utilizando a linguagem c, apresente a estutura mínima de um nó em uma lista simplesmente encadeada.
R: typedef struct apelido_no {
    int elemento;
    apelido_no *proximo;
} no;

15) Qual a diferença básica entre uma lista simplesmente encadeada e uma lista duplamente encadeada? Explique.
R: a lista simplesmente encadeada seguirá apenas um sentido, quanto a duplamente encadeada terá dois sentindos, um ponteiro de indo e outro de voltando

16) Apresente em linguagem C, apenas a estrutura do nó de uma lista circular
R: typedef struct apelido_no {
    int elemento;
    apelido_no *anterior;
    apelido_no *proximo
} no;

17) Analisando as estruturas acima,  explique a lógica implementada  na linha 5 da função buscar
R: na linha 5, o while continuara a rodar enquanto a condição do o endereço de memoria do "aux" for diferente de NULL e valor de aux -> valor for diferente do valor procurado

18) Analisando  o  código  abaixo,  apresente  exatamente  o  resultado  que  será apresentado ao usuário após a execução completa do programa.
R: Será apresentado apenas o valor 10, pois apenas a primeira adição atende com sucesso a condição do while dentro da função inserirMeio

19) Utilizando linguagem C, apresente apenas uma estrutura de exemplo de um nó de uma lista circular.
R: typedef struct apelido_no{
       int valor;
       struct apelido_no  *anterior;
       struct apelido_no  *proximo;
   } No;

20) Utilizando linguagem C, apresente apenas uma estrutura de exemplo de um nó de uma lista duplamente encadeada. 
R: typedef struct apelido_no{
       int valor;
       struct apelido_no  *anterior;
       struct apelido_no  *proximo;
   } No;

21) Apresente um exemplo do dia a dia na área computacional, do uso de LISTAS.
R: Fila de reprodução de musicas, no spotify, youtube ou algum outro app, também algum editor de texto, que um elemento pode ser inserido em qualquer local

22) Qual a principal diferença entre uma lista simplesmente encadeada e uma lista duplamente encadeada? Explique
R: A principal diferença é que a simplesmente encadeada ela segue apenas um sentido, enquanto a lista duplamente encadeada segue dois, podendo ir e voltar por exemplo

23) Considere uma lista simplesmente encadeada que contém os seguintes elementos: 10 → 20 → 30 → 40 → 50. Indique a sequência da lista após a lista receber NULL e a remoção do elemento 30, justificando sua resposta. 
R: A sequencia será somente 10 -> 20, pois após remover o 30, que ele não será mais exibido, os demais elemente 40 e 50 serão pedidos, pois foi definido NULL para a sequeencia

24) A respeito de vazamento de memória, analise o código abaixo e desenvolva uma função denominada sair() que seja responsável por liberar corretamente toda a memória alocada dinamicamente antes da finalização do programa.
R: void sair () {
    while (top != NULL) {
        desempilhar();
    }
}

25) Apresente as características sobre de Listas Circulares, explicando o seu funcionamento.
R: As lista circulares vão seguir o mesmo principio da lista duplamente encadeada, vai guardar o endereço de memoria do elemento anterior e do proximo, porem o primeiro item da lista vai guardar o endereço de memoria do ultimo elemento, e o ultimo elemento no seu endereço de *proximo vai apontar para o primeiro elemento da lista 

26) Apresente três desenhos que representem graficamente:
R: Fazer as mimagens no paint e anexar no documento

27) Quais são as regras para inserção e remoção de elementos (nós) em uma lista?
R: para inserir no inicio deve ser criado uam novo nó como "novo", apontar o seu endereço de *proximo para o proximo elemento da lista, para remover iremos armazenar o endereço de memoria em uma variavel temp e fazer a remoção
para inserir no meio, criaremos o mesmo nó "novo", porem pegaremos o elemento anterior e vamos apontar o *proximo para o endereço de novo, e o *proximo de novo para o elemento em sequeencia, já para remover um elemento do meio da lista antes precisamos mudar o endeço de memoria que o *proximo do elemento anterior aponta para o elemento apos o que queremos remover
para inserir no final, mudamos o endereço de *proximo do ultimo elemento de NULL para o endereço de memoria do novo, e para remover mudamos o endereço de memoria do penultimo elemento de *proximo para NULL, para dizer que ali é o final da lista

28) Analise o código abaixo desenvolvido em linguagem C e apresente a representação gráfica (desenho da estrutura) após a execução completa do programa, inclusive sinalizando onde a variável *p estará apontando, bem como a que estrutura se refere (pilha, fila, lista simplesmente encadeada, lista duplamente encadeada ou lista circular).
R: A apresentação final será 19 -> 8 -> 71, a principio foi identificado que se trata de uma lista simplesmente encadeada, pois estamos inserindo os elementos no inicio, e também conseguimos remover elementos do inicio, não pode ser pilha pois não estamos inserindo no topo e sim no inicio, e a variavel *p vai apontar para o endereço de memoria do 19, que indica o inicio da lista

29) Como podemos determinar o tamanho de uma lista? Explique.
R: para descobrirmos o tamanho da lista nos vamos precisar percorrer todos os elemento até encontrar o *proximo que aponte para NULL, e a cada elemento percorrido precisamos guardar a contagem em uma variavem count ++ por exemplo

30) Crie uma função que verifica se um número é par ou ímpar. Em seguida, percorra a lista e, para cada nó, verifique se o valor é par ou ímpar. Caso seja par, insere em uma lista de números pares, caso contrário (ímpar), insere em uma lista de números ímpares.
R: void par_ou_impar() {
        NO *temp = lista;

        while (temp != NULL) {
            if (temp->num % 2 == 0)
                inserir(&lista_pares, temp -> num);
            else {
                inserir(&lista_impares, temp -> num);
            }
            temp = temp->proximo;
        }
   }







