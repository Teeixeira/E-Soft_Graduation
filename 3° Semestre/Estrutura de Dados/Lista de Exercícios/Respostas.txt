1) O que uma variável de ponteiro armazena?
R: Armazena o endereço de memoria de uma variável

2) Qual o tamanho (em bytes) de uma variável de ponteiro int e de uma variável de ponteiro char?
R: Depende do compilador, se for de 32 bits é 4 bytes, se for de 64 bits é 8 bytes

3) Por qual motivo uma variável de ponteiro, ao ser apresentado o seu conteúdo ao usuário, pode  mostrar  0060FEF0 ou 000000000060FEF0? 
R: Isso varia por conta do compilador ser 32bits ou 64 bits, podendo variar o tamanho do endereço de memoria

4) Em qual área da memória serão alocadas as variáveis de ponteiro?
R: Elas ficam armazenadas no stack

5) Em qual área da memória são alocados blocos de memória para uma alocação dinâmica?
R: Fica armazenado no Heap da memoria

6) Considerando o programa desenvolvido em linguagem C abaixo, e sabendo que o endereço de memória  da  variável  x  é  0060FF24  e  o  da  variável  ponteiro  *ptr_x  é  0060FF20,  qual  será  o  resultado exibido ao usuário após a execução do comando printf("%d",*ptr_x);  na linha5?
R: Será apresentado o valor de X = 22

7) Sobre  a  questão  anterior,  o  que  seria  apresentado  ao  usuário  após  a  execução  do  comando  printf("%p",ptr_x);  na linha 5?
R: Será apresentando o endereço de memoria de x

8) Ainda  sobre  a  questão  6,  o  que  seria  apresentado  ao  usuário  após  a  execução  do  comando  printf("%p",&ptr_x);  na linha 5?
R: Será apresentando o endereço de memoria do ponteiro "ptr_x"

9) Também sobre a questão 6, o que seria apresentado ao usuário após a execução do comando  printf("%p",&*ptr_x);  na linha 5?
R: Vai ser apresentado o endereço de memoria para qual o ponteiro está apontando, nesse caso de x

10) Finalmente  sobre  a  questão  6,  o  que  seria  apresentado  ao  usuário  após  a  execução  do 
comando printf("%d",  x); na linha 5?
R: Seria apresentado o valor de X = 22

11) Qual o tipo que um ponteiro deve ser declarado? Explique.
R: O ponteiro deve ser declarado conforme o tipo de variavel que ele vai armazenar, para garantir que o acesso da memoria ocorra com sucesso

12) Embora não recomendado, ao declararmos um ponteiro como void, o que será necessário para apresentar o valor ao qual ele está apontando?
R: vamos precisar converter o ponteiro para um tipo adequado, confrome o qual for utilizar, para podermos manipular os dados

13) Analisando o código abaixo desenvolvido em linguagem C, apresente o que será apresentado ao usuário após sua execução e justifique sua resposta.
R: O resultado vai ser imprevisivel, pois como o ponteiro não foi apontado para nada ainda, ele só está atribuido a um endereço de memoria, que pode vim com a memoria limpa e o valor de 0, ou com lixo de memoria com o seu conteudo imprevisivel

14) Analisando o código abaixo desenvolvido em linguagem C, apresente o que será apresentado ao usuário após sua execução. Justifique sua resposta
R: vai ser apresentado o valor 51, pois *ptr_x = 51 está atribuido o valor "51" ao endereço em que o ponteiro está apontando.

15) Analisando o código abaixo desenvolvido em linguagem C, apresente o que será apresentado ao usuário após sua execução. Justifique sua resposta 
R: No primeiro printf será apresentado o valor de x que é igual a 100, já para o segundo printf será apresentado o valor de y, que será de 200, pois entre os printf o ponteiro foi declaro igual ao endereço de memoria do y

16) Qual o objetivo da função sizeof utilizando em lin guagem C? Explique e dê um exemplo.
R: o sizeof é uma função em que calcula quanto bytes a variavel, tipo, struct ou elemento está ocupando de memoria, por exemplo sizeof(int) vai retornar um valor de 4 bytes, que é o tamanho que o tipo int ocupa de memoria

17) Considerando  o  código  abaixo  desenvolvido  em  lin guagem  C  em  um  compilador  de  64bits, apresente o que será apresentado ao usuário após sua execução. Justifique sua resposta
R: Será exibido o valor de 12 bytes, pois a variavel por ser do tipo int consome 4 bytes e o ponteiro independente do tipo sempre vai consumir 8 bytes em compiladores 64 bits

18) CÓDIGO EM ARQUIVO SEPARADO

19) Apresente que tipo de informações são alocadas nas seguintes áreas da memória: 
a)  Stack - espaço da memoria aonde é definido as variaveis locais
b)  Heap - espaço da memoria em que as variaveis são executadas
c) Executable Instructions - local da memoria em que o programa é executado
d)  Static Variable / Automatic Variable - é o local da memoria em que as variaveis globais e funções são definidas

20) Um código em linguagem C possui uma variável do tipo char identificada por s de tamanho 10 com o conteúdo “Moreno” e uma segunda variável de (ponteiro do tipo char), identificada por ptr, fazendo referência à variável s. Considerando que a variável ptr possua o valor 0060FF10, qual será  o  valor  apresentado ao usuário ao executar o comando printf("%p \n",&s[2]);? Justifique sua resposta.
R: Sera exibido o endereço de memoria 0060FF12, pois a variavel do tipo char ocupa 1 byte por elemento, para sabermos o endereço de memoria de s[2] devemos passar 2 bytes do endereço inicial

21) Analisando  o  código  abaixo  desenvolvido  em  linguagem  C,  apresente  o  resultado  que  será apresentado ao usuário após sua execução. Justifique sua resposta.
R: Sera exibido o valor de n1 = 30 e n2 = 10

22) Analisando  o  código  abaixo  desenvolvido  em  linguagem  C,  muito  semelhante  ao  anterior,  apresente  o  resultado  que  será  apresentado  ao  usuário  após  sua  execução.  Justifique  sua  resposta.
R: Os valores exibidos continuaram a ser n1 = 30 e n2 = 10, porém agora os valores serão transferidos atraves de endereços de memorias por ponteiros

23) Considerando  o  programa  abaixo,  implemente  um  procedimento  chamado  altera  que  receba como parâmetros um vetor (por referência) e seu tamanho (por valor). Este procedimento deverá  atualizar cada elemento do vetor atribuindo o dobro do seu valor.
R: void altera(int a[], int tamanho){
    for(int i = 0; i < tamanho; i++){
        a[i] = a[i] * 2;
    }
}

24) CÓDIGO EM ARQUIVO SEPARADO

25) CÓDIGO EM ARQUIVO SEPARADO

26) Já tinha feito direto dessa forma kkkkkk

27) É possível utilizar um ponteiro para fazer referência a uma variável de struct? Se sim, apresente um exemplo.
R: (*ptr).nome) ou ptr -> nome

28) Defina o termo “ponteiro de ponteiro”
R: Ponteiro de ponteiro é quando um ponteiro aponta para outro, por exemplo uma matriz, é um ponteiro (vetor linha) que aponta para outro ponteiro (vetor coluna)

29) Considerando  o  programa  abaixo,  descreva  o  que  será  apresentado  ao  usuário  após  a execução completa do mesmo.
R: Será apresentado o valor de X, do *ptr1 e **ptr2 = X, após a exibição do valores será exibido novamente o valor de X, em seguinda *ptr1 = X e o endereço de memoria de X, e por ultimo **ptr2 = X e o endereço de memoria de ptr2

30) Explique uma situação prática em que o uso de ponteiros em linguagem C é essencial ou traz vantagens em relação ao uso de variáveis comuns. Descreva o motivo da utilização de ponteiros nesse contexto
R: O uso de ponteiros tras inumeras vantagens, quando utilizamos matrizes ou vetores muito grandes a sua utilização pode poupar muita memoria, evitando o desperdicio de memoria em que variaveis fixas ocupariam, dessa forma otimiza uso da memoria e velocidade do programa evitando as vezes laços indevidos.

31) Considerando que uma função retorna apenas um único resultado, é possível retornar mais de um valor em uma função através dos parâmetros? Explique.
R: Sim, uma função vai retornar apenas um valor, os parametros são "referencias" que você passa para a função poder executar e em que você espera um resultado da interação entre elas, porém com ponteiros podemos modificar e retornar mais de um valor

32) Conclua  o  programa  abaixo  desenvolvido  em  lin guagem  C  que  apresente  o  quádruplo  da variável a, utilizando o conceito de “ponteiro de ponteiro de ponteiro”.
R: **c = a * 4; printf("Quaduplo de A: %d", c);

33) CÓDIGO EM ARQUIVO SEPARADO

34) CÓDIGO EM ARQUIVO SEPARADO

35) O que significam as funções CALLOC, MALLOC e REALLOC?
R: Calloc vai alocar memoria limpa sem nenhum lixo de memoria, já Malloc vai alocar memoria e dentro do endereço de memoria pode ter ou não lixo de memoria e por ultimo o Realloc vai realocar um espaço de memoria para maior ou para menor, no novo espaço alocado pode ter ou não lixo de memoria pois o Realloc não limpa a memopria como o Calloc por exemplo

36) Qual é o objetivo da função FREE() e como devemos (sintaxe) utilizá-lo? 
R: A função free() serve para liberarmos o espaço em que alocamos X variavel, sem isso a memoria nunca vai ser liberada e ao rodar o programa diversas vezes podemos ficar sem memoria disponivel, a sua sintaxe deve ser por meio simples "free(x)" ou por for dependendo se for ponteiro de ponteiro ou além, um for dentro de for para ponteiro

37) Qual o objetivo de utilizarmos alocação dinâmica de memória? Explique.
R: Otimizarmos o consumo de memoria do nosso programa e o tempo de resposta dele, evitando que memoria desnecessaria seja alocada e fazendo que o programa seja ainda mais pesado, em programas simples não iremos sentir tanto esse efeito, porém em programas mais robustos a alocação dinamica sera evidente o desempenho ganho

38) Ao tentarmos alocar dinamicamente memória poderá não haver disponibilidade. Como resolver isso sem causar uma interrupção inesperada no programa?
R: Após tentarmos alocar a memoria criamos um if (vetor != NULL) com a mensagem de alocação bem sucedida caso seja diferente de NULL e no "else" colocamos que caso seja igual a NULL irá aparecer uma mensagem que a alocação falhou por falta de espaço na memoria

39) Como funciona e quais parâmetros são necessários para uma alocação dinâmica de memória utilizando o comando CALLOC? Explique.
R: O calloc vai alocar memoria limpando todo o conteudo anterior presente na memoria, entregando memoria limpa para ser utilizada, sua forma de utilização será: variavel = calloc(quantidade, tamanho em bytes)

40) Como funciona e quais parâmetros são necessários para uma alocação dinâmica de memória utilizando o comando MALLOC? Explique.
R: Malloc irá alocar memoria, após a alocação o conteudo na memoria poderá conter ou não lixo de memoria, os parametros para utilizarmos será: variavel = malloc(tamanho * sizeof(int))

41) Qual situação devemos utilizar a alocação CALLOC ou MALLOC? Explique
R: Calloc iremos utilizar quando queremos que todos os endereços de memorias estejam com o seu conteudo zerado, por exemplo quando esperamos que o usuario preencha aqueles campos para que possamos apresentar para ele depois, imagina o cenario em que utilizamos malloc nesse caso e após o usuário inserir os dados no momento em que formos apresentar pra ele algum dado saia como "0f564fgeq", por isso utilizamos "Calloc", já o malloc podemos utilizar para quando for o sistema em que passara os valores para cada endereço de memoria posteriormente

42) O que exatamente uma alocação dinâmica retorna, seja com CALLOC ou como MALLOC?
R: Endereços de memoria, apresentando o primeiro endereço do bloco

43) Quantos bytes de memória o retorno das funções CALLOC e MALLOC consumirão?
R: vai depender da quantidade de elementos e tipo de variavel em que passamos para o Malloc ou Calloc, caso seja por exemplo malloc(10 * sizeof(int)) sabemos que será 40 bytes

44) O bloco de memória alocado pela função MALLOC poderá conter lixo. Explique como isso pode acontecer.
R: Sim, o bloco de memoria alocado por Malloc poderá conter lixo, pois ele só separa a memoria para a variavel utilizar, ele não faz a limpeza como o Calloc, após o Malloc fazer a alocação não conseguimos ter certeza de que havera ou não lixo de memoria nos endereços

45) CÓDIGO EM ARQUIVO SEPARADO